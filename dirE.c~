#include "shell_header.h"
struct statb {
               dev_t     st_dev;         /* ID of device containing file */
               ino_t     st_ino;         /* Inode number */
               mode_t    st_mode;        /* File type and mode */
               nlink_t   st_nlink;       /* Number of hard links */
               uid_t     st_uid;         /* User ID of owner */
               gid_t     st_gid;         /* Group ID of owner */
               dev_t     st_rdev;        /* Device ID (if special file) */
               off_t     st_size;        /* Total size, in bytes */
               blksize_t st_blksize;     /* Block size for filesystem I/O */
               blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */
};
void mv_directory_func(char *a, char *b)
{
	struct stat statbuf;
	//char fName = info->cmd;
	int fd;
	uid_t uid_proc = getuid();
	fd = open("./bugs", O_PATH);
	if (fstat(fd, &statbuf) == -1)
	{
		perror("stat");
	}
	if (geteuid() != statbuf.st_uid || getegid() != statbuf.st_uid)
	{
		puts("no access");
		exit(-1);
	}
	/* lets start with directory */
	if (S_ISDIR(statbuf.st_mode))
	{
		/* do */
	}
	if (S_ISREG);
	/* x - y */
	if (close(fd) == -1)
	{
		perror("close");
		exit(-1);
	}
}

int main(void)
{
	struct stat statbuf;
	//stat("./new", &statbuf);
	//perror("stat");
	mv_directory_func("./new", "./new2");
	return (0);
}
